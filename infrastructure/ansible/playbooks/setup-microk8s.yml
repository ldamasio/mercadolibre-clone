---
- name: Setup MicroK8s Cluster
  hosts: all
  become: yes
  gather_facts: yes

  vars:
    microk8s_version: "1.28/stable"
    microk8s_addons:
      - dns
      - storage
      - ingress
      - metallb:10.64.140.43-10.64.140.49
      - rbac
      - registry
      - metrics-server

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install required packages
      apt:
        name:
          - snapd
          - curl
          - wget
          - git
          - vim
          - htop
          - iotop
          - net-tools
        state: present

    - name: Install MicroK8s
      snap:
        name: microk8s
        channel: "{{ microk8s_version }}"
        classic: yes

    - name: Add user to microk8s group
      user:
        name: "{{ ansible_user }}"
        groups: microk8s
        append: yes

    - name: Wait for MicroK8s to be ready
      command: microk8s status --wait-ready
      changed_when: false

    - name: Enable MicroK8s addons
      command: "microk8s enable {{ item }}"
      loop: "{{ microk8s_addons }}"
      changed_when: true

    - name: Create kubectl alias
      lineinfile:
        path: /home/{{ ansible_user }}/.bashrc
        line: "alias kubectl='microk8s kubectl'"
        create: yes

    - name: Create helm alias
      lineinfile:
        path: /home/{{ ansible_user }}/.bashrc
        line: "alias helm='microk8s helm3'"
        create: yes

- name: Configure Master Nodes
  hosts: masters
  become: yes
  tasks:
    - name: Get cluster token on first master
      command: microk8s add-node
      register: join_command
      when: inventory_hostname == groups['masters'][0]
      changed_when: false

    - name: Store join token
      set_fact:
        cluster_token: "{{ join_command.stdout_lines[1] }}"
      when: inventory_hostname == groups['masters'][0]

    - name: Join other masters to cluster
      command: "{{ hostvars[groups['masters'][0]]['cluster_token'] }}"
      when: 
        - inventory_hostname != groups['masters'][0]
        - hostvars[groups['masters'][0]]['cluster_token'] is defined

- name: Configure Worker Nodes
  hosts: workers
  become: yes
  tasks:
    - name: Get worker join command from master
      command: microk8s add-node
      register: worker_join_command
      delegate_to: "{{ groups['masters'][0] }}"
      changed_when: false

    - name: Join workers to cluster
      command: "{{ worker_join_command.stdout_lines[1] }} --worker"
      when: worker_join_command is defined

- name: Setup Kubernetes Components
  hosts: masters[0]
  become: yes
  tasks:
    - name: Install Helm
      snap:
        name: helm
        classic: yes

    - name: Add Istio Helm repository
      kubernetes.core.helm_repository:
        name: istio
        repo_url: https://istio-release.storage.googleapis.com/charts

    - name: Update Helm repositories
      command: microk8s helm3 repo update
      changed_when: false

    - name: Create namespaces
      kubernetes.core.k8s:
        name: "{{ item }}"
        api_version: v1
        kind: Namespace
        state: present
      loop:
        - istio-system
        - argocd
        - cert-manager
        - mercadolibre

    - name: Install Istio base
      kubernetes.core.helm:
        name: istio-base
        chart_ref: istio/base
        release_namespace: istio-system
        create_namespace: true
        wait: true

    - name: Install Istiod
      kubernetes.core.helm:
        name: istiod
        chart_ref: istio/istiod
        release_namespace: istio-system
        wait: true
        values:
          pilot:
            env:
              PILOT_ENABLE_WORKLOAD_ENTRY_AUTOREGISTRATION: true
          meshConfig:
            defaultConfig:
              proxyStatsMatcher:
                inclusionRegexps:
                  - ".*outlier_detection.*"
                  - ".*circuit_breakers.*"
                  - ".*upstream_rq_retry.*"
                  - ".*upstream_rq_pending.*"

    - name: Copy K8s manifests
      copy:
        src: "{{ playbook_dir }}/../../../k8s/"
        dest: /tmp/k8s/
        mode: '0644'

    - name: Apply cert-manager
      command: |
        microk8s kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.0/cert-manager.yaml
      changed_when: true

    - name: Wait for cert-manager to be ready
      command: |
        microk8s kubectl wait --for=condition=ready pod -l app.kubernetes.io/instance=cert-manager -n cert-manager --timeout=300s
      changed_when: false

    - name: Apply production overlays
      command: |
        microk8s kubectl apply -k /tmp/k8s/overlays/prod
      changed_when: true

    - name: Create ArgoCD namespace
      kubernetes.core.k8s:
        name: argocd
        api_version: v1
        kind: Namespace
        state: present

    - name: Install ArgoCD
      command: |
        microk8s kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
      changed_when: true

    - name: Wait for ArgoCD to be ready
      command: |
        microk8s kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=argocd-server -n argocd --timeout=300s
      changed_when: false

    - name: Get ArgoCD admin password
      command: |
        microk8s kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
      register: argocd_password
      changed_when: false

    - name: Display ArgoCD password
      debug:
        msg: "ArgoCD admin password: {{ argocd_password.stdout }}"

    - name: Apply ArgoCD applications
      command: |
        microk8s kubectl apply -f /tmp/k8s/argocd/
      changed_when: true

- name: Display cluster information
  hosts: masters[0]
  become: yes
  tasks:
    - name: Get cluster nodes
      command: microk8s kubectl get nodes
      register: nodes_output
      changed_when: false

    - name: Display nodes
      debug:
        msg: "{{ nodes_output.stdout_lines }}"

    - name: Get all pods
      command: microk8s kubectl get pods --all-namespaces
      register: pods_output
      changed_when: false

    - name: Display pods
      debug:
        msg: "{{ pods_output.stdout_lines }}"
